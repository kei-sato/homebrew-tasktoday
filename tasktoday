#!/usr/bin/env bash

set -e

USAGE="
Usage: $0
"

eecho() { echo "$@" 1>&2; }
abort() { eecho "$@"; exit 1; }

# yellow echo
yecho() {
  color=3
  echo -e $(tput setaf $color)"$*"$(tput op);
}

validateNumber() {
  [[ -z $1 ]] && return
  [[ $1 =~ ^([-][0-9]+)?[0-9]*([.][0-9]+)?$ ]] || { eecho "$1 is not a number"; return 1; }
  bc <<< "$1"
}

while getopts h option; do
  case $option in
    h|\?) abort "$USAGE"
  esac
done
shift $((OPTIND-1))

FNAME_FORMAT="%Y%m%d"
TIME_FORMAT="%H:%M"
TT_HOME="$HOME/.tasktoday"
TASKS_DIR="$TT_HOME/tasks"
NOW="$(date +"%s")"
TODAY="$(date -jf %s $((NOW-5*60*60)) +"$FNAME_FORMAT")"
TODAY_FILE="$TASKS_DIR/$TODAY"
LINK_FILE="$TASKS_DIR/today"

INDEX_ESTIMATED=1
INDEX_TITLE=2
INDEX_START=3
INDEX_END=4
INDEX_REPEAT=5
INDEX_TAGS=6

getTitle() {
  [[ -s "$TODAY_FILE" ]] || return 1
  head -n1 "$TODAY_FILE" | cut -d$'\t' -f"$INDEX_TITLE"
}

getTasks() {
  [[ -s "$TODAY_FILE" ]] || return 1
  [[ $1 != "remain" && $1 != "current" && $1 != "finished" ]] && return 1

  CMD='{
    if ($'$INDEX_START' == "" && $'$INDEX_END' == "")
      remain[NR] = $0
    else if ($'$INDEX_END' == "")
      current[NR] = $0
    else
      finished[NR] = $0
  } END {
    for (k in '"$1"') {
      print k, '"$1"'[k]
    }
  }'

  {
    colNames
    awk -F $'\t' "$CMD" < "$TODAY_FILE" | sort -n | cut -f 2- -d' '
  } | column -t -s$'\t'
  eecho "today goal: $(estimatedEndTime)"
}

calcSecWithHour() {
  NUM=$(validateNumber "$1")
  [[ -n $NUM ]] && printf %.0f $(bc <<< "scale=0; $NUM * 3600")
}

estimatedRemainTime() {
   REMAIN_TIME=$(awk -F $'\t' 'BEGIN { remain = 0 } { if ($'$INDEX_END' == "") remain += $'$INDEX_ESTIMATED' } END { print remain }' < "$TODAY_FILE")
   line=$(getCurrentTaskLine)

   if [[ -n $line ]]; then
    ESTIMATED=$(cut -d$'\t' -f"$INDEX_ESTIMATED" <<< "$line")
    ESTIMATED_SEC=$(calcSecWithHour $ESTIMATED)
    START=$(cut -d$'\t' -f"$INDEX_START" <<< "$line")
    START_SEC=$(date -jf $TIME_FORMAT "$START" +"%s")
    NOW_SEC=$(date +"%s")
    ELAPSED_SEC=$((NOW_SEC - START_SEC))

    # add additional time which is elapsed over estimated time
    if [[ $ELAPSED_SEC -gt $ESTIMATED_SEC ]]; then
      ADDITIONAL_SEC=$((ELAPSED_SEC - ESTIMATED_SEC))
      REMAIN_TIME=$(bc <<< "scale=2; $REMAIN_TIME + $ADDITIONAL_SEC / 3600")
    fi
   fi

   echo $REMAIN_TIME
}

calcStartTime() {
  DURATION_HOUR=${1:-1}
  END_SEC=${2:-$(date +"%s")}
  DURATION_SEC=$(calcSecWithHour $DURATION_HOUR)
  echo $(date -jf "%s" "$((END_SEC - DURATION_SEC))" +"$TIME_FORMAT")
}

calcEndTime() {
  DURATION_HOUR=${1:-1}
  START_SEC=${2:-$(date +"%s")}
  DURATION_SEC=$(calcSecWithHour $DURATION_HOUR)
  echo $(date -jf "%s" "$((START_SEC + DURATION_SEC))" +"$TIME_FORMAT")
}

estimatedEndTime() {
  ESTIMATED_REMAIN_HOUR=$(estimatedRemainTime)
  # set start to the start of current task if current task exists
  # otherwise current time
  START_SEC=$(getCurrentTaskStartSec)
  START_SEC=${START_SEC:-$(date +"%s")}
  calcEndTime "$ESTIMATED_REMAIN_HOUR" "$START_SEC"
}

countLine() {
  if [[ -s "$1" ]]; then
    wc -l < "$1" | tr -d [[:space:]]
  else
    echo 0
  fi
}

addFromOldTasks() {
  TODAY_SEC=$(date +"%s")
  if [[ $(date +"%u") -eq 1 ]]; then
    PREVIOUS_DAY_SEC=$((TODAY_SEC - 3*24*3600))
  else
    PREVIOUS_DAY_SEC=$((TODAY_SEC - 24*3600))
  fi
  PREVIOUS_DAY=$(date -jf "%s" $PREVIOUS_DAY_SEC +"$FNAME_FORMAT")
  WEEK_AGO=$(date -jf "%s" $((TODAY_SEC - 7*24*3600)) +"$FNAME_FORMAT")
  PREVIOUS_DAY_FILE=$TASKS_DIR/$PREVIOUS_DAY
  WEEK_AGO_FILE=$TASKS_DIR/$WEEK_AGO
  TMPFILE=$(mktemp)

  {
    [[ -s $PREVIOUS_DAY_FILE ]] && cat "$PREVIOUS_DAY_FILE"
    [[ -s $WEEK_AGO_FILE ]] && cat "$WEEK_AGO_FILE"
  } > "$TMPFILE"

  [[ -s $TMPFILE ]] || abort "history not found"

  while [[ $(countLine "$TMPFILE") -gt 0 ]]; do
    awk '{ a[$2] = $0 } END { for(k in a) { print a[k] } }' < "$TMPFILE" | sort | awk '{print NR")\t"$0' | column -t -s$'\t'
    read -rn1 -p "input number of the line (or quit if not a number): " LINE_NUM <&3
    [[ ${LINE_NUM} -ge 0 ]] || break
  done
}

addTask() {
  unset LINE_NUM

  while getopts e:r:t:i option; do
    case $option in
      e) ESTIMATED="$OPTARG";;
      r) REPEAT="$OPTARG";;
      t) TAGS="$OPTARG";;
      i) LINE_NUM=$(getLastFinishedTaskLineNum);;
    esac
  done
  shift $((OPTIND-1))

  [[ $# -eq 0 ]] && abort "title not found"

  TITLE="$*"
  : "${ESTIMATED:=0.5}"
  : "${REPEAT:=}"
  : "${TAGS:=}"
  START=""
  END=""

  [[ $ESTIMATED = '.' || $ESTIMATED = '.5' ]] && ESTIMATED=0.5

  RECORD="$ESTIMATED\t$TITLE\t$START\t$END\t$REPEAT\t$TAGS"

  : ${LINE_NUM:=$(wc -l < "$TODAY_FILE")}
  insertTask "$LINE_NUM" "$RECORD"

  printTasksWithGoal
}

insertTask() {
  LINE_NUM=${1:-0}
  [[ $LINE_NUM -ge 0 ]] || return

  NEW_LINE=$2
  [[ -z "$NEW_LINE" ]] && return

  TMPFILE=$(mktemp)

  {
    [[ $LINE_NUM -gt 0 ]] && head $((LINE_NUM*-1)) "$TODAY_FILE"
    echo -e "$NEW_LINE"
    tail +$((LINE_NUM+1)) "$TODAY_FILE"
  } > "$TMPFILE"

  mv "$TMPFILE" "$TODAY_FILE"
}

getLastFinishedTaskLineNum() {
  [[ -s "$TODAY_FILE" ]] || { echo 0; return; }

  LINE_NUM=0
  while read -r line; do
    START=$(cut -d$'\t' -f"$INDEX_START" <<< "$line")
    [[ -z $START ]] && { echo $LINE_NUM; return; }
    ((LINE_NUM++))
  done < "$TODAY_FILE"
  echo $LINE_NUM
}

getCurrentTaskLine() {
  [[ -s "$TODAY_FILE" ]] || return

  while read -r line; do
    END=$(cut -d$'\t' -f"$INDEX_END" <<< "$line")
    if [[ -z $END ]]; then
      START=$(cut -d$'\t' -f"$INDEX_START" <<< "$line")
      if [[ -n $START ]]; then
        echo "$line"
        return
      fi
    fi
  done < "$TODAY_FILE"
}

getCurrentTaskStartSec() {
  line=$(getCurrentTaskLine)
  [[ -z "$line" ]] && return

  START=$(cut -d$'\t' -f"$INDEX_START" <<< "$line")
  START_SEC=$(date -jf $TIME_FORMAT "$START" +"%s")
  echo "$START_SEC"
}

printCurrentTask() {
  line=$(getCurrentTaskLine)
  [[ -z "$line" ]] && return

  TITLE=$(cut -d$'\t' -f"$INDEX_TITLE" <<< "$line")
  ESTIMATED=$(cut -d$'\t' -f"$INDEX_ESTIMATED" <<< "$line")
  START=$(cut -d$'\t' -f"$INDEX_START" <<< "$line")
  START_SEC=$(date -jf $TIME_FORMAT "$START" +"%s")
  ESTIMATED_END=$(calcEndTime "$ESTIMATED" "$START_SEC")
  NOW_SEC=$(date +"%s")
  ELAPSED_SEC=$((NOW_SEC - START_SEC))
  [[ $ELAPSED_SEC -lt 0 ]] && ELAPSED_SEC=$((ELAPSED_SEC + 24*60*60))
  ZERO_SEC=$(date -jf "$TIME_FORMAT" "00:00" +"%s")
  ELAPSED=$(date -jf %s $((ZERO_SEC + ELAPSED_SEC)) +"$TIME_FORMAT")
  1>&2 yecho "<< $TITLE >>"$'\n'"now $ELAPSED from $START will end $ESTIMATED_END"$'\n'
}

startTask() {
  [[ -s "$TODAY_FILE" ]] || { abort "no tasks"; }
  ELAPSED=$(validateNumber "$1")
  STARTED=false
  TMPFILE=$(mktemp)
  printCurrentTask
  exec 3<&0
  while read -r line; do
    $STARTED && { echo "$line"; continue; }

    END=$(cut -d$'\t' -f"$INDEX_END" <<< "$line")
    if [[ -z $END ]]; then
      START=$(cut -d$'\t' -f"$INDEX_START" <<< "$line")
      if [[ -n $START ]]; then
        read -rn1 -p "restart? [y/N]: " SHOULD_RESTART <&3
        eecho
        [[ ${SHOULD_RESTART} = "y" ]] || {
          echo "$line"
          STARTED=true
          continue
        }
      fi

      START=$(date +"$TIME_FORMAT")
      [[ -n $ELAPSED ]] && START=$(calcStartTime "$ELAPSED" "$(date +%s)")
      # insert tabs if not enough
      while [[ $(tr -cd $'\t' <<< "$line" | wc -c) -lt $((INDEX_START-2)) ]]; do line="$line"$'\t'; done
      # create new line
      line="$(echo -n "$line" | cut -d$'\t' -f -$((INDEX_START-1)))"$'\t'$START
      echo "$line"
      STARTED=true
    else
      echo "$line"
    fi
  done < "$TODAY_FILE" > "$TMPFILE"
  exec 0<&3 3<&-
  mv "$TMPFILE" "$TODAY_FILE"
  printTasksWithGoal
}

# usage: tasktoday (en|end) [time_in_hour]
endTask() {
  [[ -s "$TODAY_FILE" ]] || { abort "no tasks"; }
  DURATION=$(validateNumber "$1")
  END_CREATED=false
  START_CREATED=false
  TMPFILE=$(mktemp)
  while read -r line; do
    $START_CREATED && { echo "$line"; continue; }

    START=$(cut -d$'\t' -f"$INDEX_START" <<< "$line")
    END=$(cut -d$'\t' -f"$INDEX_END" <<< "$line")
    
    # auto start next task
    if $END_CREATED; then
      START=$PREV_END
      line="$(echo -n "$line" | cut -d$'\t' -f $(((INDEX_START-1) * -1)))"$'\t'$START
      echo "$line"
      START_CREATED=true

    # the first not end task
    elif [[ -z $END ]]; then
      END=$(date +"$TIME_FORMAT")

      # if start is empty and not first task on the day, then set previous end time for the start time
      [[ -z $START ]] && START=$PREV_END

      # calc start time with specified value if it is passed
      if [[ -n $DURATION ]]; then
        if [[ -n $START ]]; then
          START_SEC=$(date -jf $TIME_FORMAT "$START" +"%s")
          END=$(calcEndTime "$DURATION" "$START_SEC")
        else
          END_SEC=$(date -jf $TIME_FORMAT "$END" +"%s")
          START=$(calcStartTime "$DURATION" "$END_SEC")
        fi
      fi

      # if duration is not specified, and it's the first task on the day, calc start time with estimated time
      if [[ -z $START ]]; then
        END_SEC=$(date -jf $TIME_FORMAT "$END" +"%s")
        ESTIMATED=$(cut -d$'\t' -f"$INDEX_ESTIMATED" <<< "$line")
        START=$(calcStartTime "$ESTIMATED" "$END_SEC")
      fi

      # start time would be never expected to be zero here
      [[ -z $START ]] && { eecho "start not found"; exit 1; }

      # create new line
      line="$(echo -n "$line" | cut -d$'\t' -f $(((INDEX_START-1) * -1)))"$'\t'$START$'\t'$END
      echo "$line"
      END_CREATED=true
    else
      echo "$line"
    fi

    PREV_END=$END

  done < "$TODAY_FILE" > "$TMPFILE"
  mv "$TMPFILE" "$TODAY_FILE"
  printTasksWithGoal
}

cancelTask() {
  [[ -s "$TODAY_FILE" ]] || { abort "no tasks"; }
  CANCELED=false
  TMPFILE=$(mktemp)
  while read -r line; do
    $CANCELED && { echo "$line"; continue; }

    START=$(cut -d$'\t' -f"$INDEX_START" <<< "$line")
    END=$(cut -d$'\t' -f"$INDEX_END" <<< "$line")
    
    if [[ -z $END && -n $START ]]; then
      # create new line
      line="$(echo -n "$line" | cut -d$'\t' -f $(((INDEX_START-1) * -1)))"$'\t'$'\t'
      echo "$line"
      CANCELED=true
    else
      echo "$line"
    fi

  done < "$TODAY_FILE" > "$TMPFILE"
  mv "$TMPFILE" "$TODAY_FILE"
  printTasksWithGoal
}

colNames() {
  echo "ESTIMATE"$'\t'"TITLE"$'\t'"START"$'\t'"END"$'\t'"REPEAT"$'\t'"TAGS"
}

printAllTasks() {
  {
    colNames
    cat "$TODAY_FILE"
  } | column -t -s$'\t'
}

printTasksWithGoal() {
  printAllTasks
  eecho "today goal: $(estimatedEndTime)"
}

######################### main #########################
mkdir -p "$TASKS_DIR"
touch "$TODAY_FILE"

# overwrite if new file created
[[ -s "$TODAY_FILE" ]] || ln -sf "$TODAY_FILE" "$LINK_FILE"

[[ $# -eq 0 ]] && {
  if [[ -s "$TODAY_FILE" ]]; then
    printCurrentTask
    printTasksWithGoal
  else
    echo "no tasks"
  fi
  exit
}

CMD="$1"
shift

case $CMD in
  ad|add) addTask "$@";;
  ca|can|cancel) cancelTask "$@";;
  clear) :> "$TODAY_FILE";;
  en|end) endTask "$@";;
  ed|edi|edit) ${EDITOR:-vim} "$TODAY_FILE";;
  fin|finished) getTasks finished;;
  file|path) echo "$TODAY_FILE";;
  in|ins|insert) addTask -i "$@";;
  remain) getTasks remain;;
  st|sta|start) startTask "$@";;
  help) abort "$USAGE";;
  *) addTask "$CMD" "$@"
esac
